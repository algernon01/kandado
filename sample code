<?php
/* ========================================================================
   SECURITY ALERTS (Admin)
   - Medium pill buttons + medium header icon
   - SweetAlert-like popups (alert + confirm) with pure CSS/JS
   - Bulk actions: Mark read, Mark unread, **Delete selected**
   - Responsive: table (desktop) -> card rows (mobile)
   - PDO + PRG; 7-day window; chips; pagination; unread highlight
   ======================================================================== */

if (session_status() === PHP_SESSION_NONE) session_start();

/* DB (PDO) */
require_once '../../config/db.php'; // must define $pdo (PDO)
$pdo->exec("SET time_zone = '+08:00'"); // ensure UTC+8 for display

/* ---------------------- POST actions (PRG) ---------------------- */
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $action = $_POST['action'] ?? '';

  // Collect ids (single row or bulk)
  $ids = [];
  if (isset($_POST['id'])) {
    $ids = [(int)$_POST['id']];
  } elseif (!empty($_POST['ids']) && is_array($_POST['ids'])) {
    foreach ($_POST['ids'] as $v) $ids[] = (int)$v;
    $ids = array_values(array_unique(array_filter($ids)));
  }

  $affected = 0;
  try {
    if ($action === 'mark_read' && $ids) {
      $in = implode(',', array_fill(0, count($ids), '?'));
      $stmt = $pdo->prepare("UPDATE security_alerts SET is_read = 1 WHERE id IN ($in)");
      $stmt->execute($ids);
      $affected = $stmt->rowCount();
      $_SESSION['flash'] = ["Marked {$affected} alert(s) as read.", "success"];
    } elseif ($action === 'mark_unread' && $ids) {
      $in = implode(',', array_fill(0, count($ids), '?'));
      $stmt = $pdo->prepare("UPDATE security_alerts SET is_read = 0 WHERE id IN ($in)");
      $stmt->execute($ids);
      $affected = $stmt->rowCount();
      $_SESSION['flash'] = ["Marked {$affected} alert(s) as unread.", "success"];
    } elseif ($action === 'mark_all_read') {
      $stmt = $pdo->prepare("
        UPDATE security_alerts
           SET is_read = 1
         WHERE is_read = 0
           AND created_at >= (UTC_TIMESTAMP() - INTERVAL 7 DAY)
      ");
      $stmt->execute();
      $affected = $stmt->rowCount();
      $_SESSION['flash'] = ["Marked {$affected} recent alert(s) as read.", "success"];
    } elseif ($action === 'delete' && $ids) {
      $in = implode(',', array_fill(0, count($ids), '?'));
      $stmt = $pdo->prepare("DELETE FROM security_alerts WHERE id IN ($in)");
      $stmt->execute($ids);
      $affected = $stmt->rowCount();
      $_SESSION['flash'] = ["Deleted {$affected} alert(s).", "error"];
    }
  } catch (Throwable $e) {
    $_SESSION['flash'] = ["Action failed. Please try again.", "error"];
  }

  // Redirect to GET (PRG pattern)
  $qs = $_GET ? ('?' . http_build_query($_GET)) : '';
  header("Location: security_alerts.php{$qs}");
  exit;
}

/* -------------------------- GET side --------------------------- */
include '../../includes/admin_header.php';

date_default_timezone_set('Asia/Manila');

$allowedCauses = ['all','theft','door_slam','bump','tilt_only','other'];
$cause = strtolower($_GET['cause'] ?? 'all');
if (!in_array($cause, $allowedCauses, true)) $cause = 'all';

$onlyUnread   = isset($_GET['only_unread']) && $_GET['only_unread'] == '1' ? 1 : 0;
$autoRefresh  = isset($_GET['autorefresh']) && $_GET['autorefresh'] == '1' ? 1 : 0;

$page    = max(1, (int)($_GET['page'] ?? 1));
$perPage = 20;
$offset  = ($page - 1) * $perPage;

/* WHERE (last 7 days; +filters) */
$where  = "created_at >= (UTC_TIMESTAMP() - INTERVAL 7 DAY)";
$params = [];
if ($cause !== 'all') { $where .= " AND cause = ?"; $params[] = $cause; }
if ($onlyUnread)      { $where .= " AND is_read = 0"; }

/* Count & fetch */
$stmt = $pdo->prepare("SELECT COUNT(*) FROM security_alerts WHERE $where");
$stmt->execute($params);
$total = (int)$stmt->fetchColumn();

$sql = "
  SELECT id, cause, is_read, created_at
    FROM security_alerts
   WHERE $where
   ORDER BY created_at DESC
   LIMIT $perPage OFFSET $offset
";
$stmt = $pdo->prepare($sql);
$stmt->execute($params);
$rows = $stmt->fetchAll(PDO::FETCH_ASSOC);
$totalPages = max(1, (int)ceil($total / $perPage));

/* Per-cause counts (7d; honor unread filter) */
$countWhere = "created_at >= (UTC_TIMESTAMP() - INTERVAL 7 DAY)";
if ($onlyUnread) $countWhere .= " AND is_read = 0";
$stmt = $pdo->query("
  SELECT cause, COUNT(*) AS cnt
    FROM security_alerts
   WHERE $countWhere
   GROUP BY cause
");
$causeCounts = array_fill_keys($allowedCauses, 0);
$allTotal = 0;
foreach ($stmt as $row) {
  $cc = $row['cause'] ?? 'other';
  $n = (int)$row['cnt'];
  $allTotal += $n;
  if (isset($causeCounts[$cc])) $causeCounts[$cc] = $n;
}
$causeCounts['all'] = $allTotal;

/* Flash (SweetAlert-like) */
$flash = $_SESSION['flash'] ?? null; // [message, type]
unset($_SESSION['flash']);

/* Helpers */
if (!function_exists('sa_esc')) {
  function sa_esc($s){ return htmlspecialchars((string)$s, ENT_QUOTES, 'UTF-8'); }
}
if (!function_exists('sa_cause_label')) {
  function sa_cause_label($c){
    switch ($c) {
      case 'theft':     return 'Theft';
      case 'door_slam': return 'Door Slam';
      case 'bump':      return 'Bump';
      case 'tilt_only': return 'Tilt Only';
      default:          return 'Other';
    }
  }
}
if (!function_exists('sa_time_ago')) {
  function sa_time_ago($dt){
    $ts = is_int($dt) ? $dt : strtotime($dt);
    $d  = time() - $ts;
    if ($d < 60)   return $d.'s ago';
    if ($d < 3600) return floor($d/60).'m ago';
    if ($d < 86400)return floor($d/3600).'h ago';
    return floor($d/86400).'d ago';
  }
}
if (!function_exists('sa_url_with')) {
  function sa_url_with($overrides = []) {
    $p = $_GET;
    foreach ($overrides as $k=>$v){ if($v===null) unset($p[$k]); else $p[$k]=$v; }
    return 'security_alerts.php' . ($p ? ('?' . http_build_query($p)) : '');
  }
}

/* Accent colors */
$badgeColors = [
  'theft'     => '#ef4444',
  'door_slam' => '#6366f1',
  'bump'      => '#3b82f6',
  'tilt_only' => '#10b981',
  'other'     => '#64748b',
];
?>
<style>
/* ===================== Scoped page styles ===================== */
#alerts{ padding:24px 20px 40px; }
#alerts .wrap{ max-width:1160px; margin:0 auto; }
@media (min-width:1600px){ #alerts .wrap{ max-width:1240px; } }
@media (max-width:1080px){ #alerts{ padding:16px; } }

.card{ background:#fff; border-radius:14px; box-shadow:0 8px 24px rgba(22,28,45,.06); }

/* Header + icon (medium) */
.page-head{ display:flex; align-items:center; gap:12px; margin:0 0 14px; }
.page-head .title{ font-size:28px; font-weight:800; color:#2b3a67; display:flex; align-items:center; gap:12px; }
.page-head .icon{
  width:36px; height:36px; display:inline-flex; align-items:center; justify-content:center;
  background:#eef2ff; color:#2f54eb; border-radius:10px;
}
.page-head .icon svg{ width:22px; height:22px; }

/* Controls */
label.small{ font-size:12px; font-weight:600; color:#5b6b8d; }
select, .checkbox{
  height:42px; border:1px solid #e6e9f4; border-radius:12px; background:#fff; padding:0 12px; font-size:14px;
}
.toolbar{ padding:16px; display:flex; gap:12px; align-items:center; flex-wrap:wrap; }

/* Medium pill buttons for Apply/Reset */
.btn{
  --h: 42px;
  height:var(--h);
  border:0; border-radius:999px; padding:0 16px; font-weight:800; font-size:14px; cursor:pointer;
  text-decoration:none; display:inline-flex; align-items:center; gap:10px;
}
a.btn{ text-decoration:none; }
.btn.apply{ background:#3056ff; color:#fff; }
.btn.reset{ background:#eef2ff; color:#2a3db6; } /* NO icon */

/* Action pills (medium) */
.pill{
  --h: 42px;
  height:var(--h);
  display:inline-flex; align-items:center; gap:10px; padding:0 16px; border-radius:999px; font-weight:800; font-size:14px;
  border:1px solid transparent; text-decoration:none;
}
.pill svg{ width:18px; height:18px; }
.pill.blue{  color:#1e40af; background:#eaf1ff; border-color:#d9e6ff; }
.pill.amber{ color:#92400e; background:#fff1d6; border-color:#ffe4b5; }
.pill.red{   color:#9f1d1d; background:#ffe1e1; border-color:#ffc9c9; }
.pill-group{ display:flex; gap:12px; align-items:center; justify-content:center; flex-wrap:wrap; }

.muted{ color:#8592b0; font-size:12px; }

.quick-chips{ display:flex; gap:10px; flex-wrap:wrap; padding:12px 16px 16px; }
.chip{
  display:inline-flex; align-items:center; gap:8px; border:1px solid #e6e9f4; background:#fff;
  border-radius:999px; padding:8px 12px; text-decoration:none; color:#2d3a69; font-weight:700; font-size:12px;
}
.chip.active{ background:#2f54eb; border-color:#2f54eb; color:#fff; }

.headerline{ display:flex; gap:10px; align-items:center; padding:12px 16px; }

/* Table */
.table-wrap{ overflow:auto; }
.table{ width:100%; border-collapse:separate; border-spacing:0 10px; }
.table thead th{
  position:sticky; top:0; background:#f9fbff; z-index:1; padding:12px; text-transform:uppercase;
  font-size:12px; letter-spacing:.03em; color:#6f7da6; text-align:center;
  border-top-left-radius:12px; border-top-right-radius:12px;
}
.table tbody tr{ background:#fff; box-shadow:0 3px 12px rgba(0,0,0,.05); border-radius:12px; }
.table tbody td{ padding:14px 12px; vertical-align:middle; text-align:center; }

.col-time small{ display:block; color:#6f7da6; }
.badge{
  display:inline-flex; align-items:center; gap:8px; padding:8px 12px; border-radius:999px; font-weight:700; font-size:12px;
  background:#eef2ff; color:#1f2937;
}
.badge .dot{ width:10px; height:10px; border-radius:999px; display:inline-block; }

.row-unread{ border-left:4px solid #3056ff; }

/* Bulk bar */
.bulkbar{
  display:none; align-items:center; justify-content:space-between; gap:12px; padding:12px 16px; border-top:1px dashed #e6e9f4;
}
.bulkbar.active{ display:flex; }
.bulkbar .count{ font-weight:800; }

/* Pagination */
.pagination{
  display:flex; align-items:center; justify-content:space-between; gap:10px; padding:12px 16px; flex-wrap:wrap;
}
.pager{ display:flex; gap:6px; align-items:center; flex-wrap:wrap; }
.pager a, .pager span{
  padding:6px 10px; border-radius:8px; border:1px solid #e2e6f2; background:#fff; color:#2d3a69; text-decoration:none; font-weight:600; font-size:13px;
}
.pager a.active{ background:#2f54eb; color:#fff; border-color:#2f54eb; }
.pager .sep{ pointer-events:none; border:none; background:transparent; padding:0 2px; }

/* SweetAlert-like modal (alert + confirm) */
.sweet-overlay{
  position:fixed; inset:0; background:rgba(15,23,42,.6); display:none; align-items:center; justify-content:center; z-index:9999;
}
.sweet{
  width:min(420px, 92vw); background:#fff; border-radius:16px; box-shadow:0 30px 60px rgba(0,0,0,.35);
  padding:22px 18px; text-align:center;
}
.sweet .icon{
  width:56px; height:56px; border-radius:50%; display:inline-flex; align-items:center; justify-content:center; margin:0 auto 10px;
}
.sweet.success .icon{ background:#e7f6ee; color:#16a34a; }
.sweet.error   .icon{ background:#ffe8e8; color:#dc2626; }
.sweet .title{ font-size:18px; font-weight:900; color:#0b1e3a; margin-bottom:6px; }
.sweet .text{ color:#475569; font-size:14px; margin-bottom:16px; }
.sweet .actions{ display:flex; gap:10px; justify-content:center; }
.sweet .btn{ height:40px; border-radius:10px; font-weight:800; padding:0 14px; }
.sweet .btn.primary{ background:#3056ff; color:#fff; }
.sweet .btn.cancel { background:#eef2ff; color:#2a3db6; }

/* Mobile cards */
@media (max-width: 760px){
  .table{ display:block; border-spacing:0; }
  .table thead{ display:none; }
  .table tbody{ display:block; }
  .table tbody tr{
    display:block; border-radius:14px; box-shadow:0 3px 12px rgba(0,0,0,.05); margin:12px 8px; padding:10px 10px;
  }
  .table tbody td{ display:flex; align-items:center; justify-content:space-between; padding:8px 6px; text-align:left; }
  .table tbody td[data-label]::before{
    content:attr(data-label);
    color:#6f7da6; font-size:12px; font-weight:700;
  }
  .pill-group{ justify-content:flex-end; }
  .pill{ width:auto; }
  .toolbar{ gap:10px; }
  .quick-chips{ padding:8px 12px 12px; }
}
</style>

<main id="content">
  <section id="alerts">
    <div class="wrap">

      <!-- PAGE HEADER WITH MEDIUM ICON -->
      <div class="page-head">
        <div class="title">
          <span class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true">
              <path fill="currentColor" d="M12 2l7 3v6c0 5.25-3.438 9.75-7 11-3.562-1.25-7-5.75-7-11V5l7-3zM7 6.385V11c0 3.967 2.544 7.76 5 8.971 2.456-1.211 5-5.004 5-8.971V6.385L12 4.539 7 6.385z"/>
              <path fill="currentColor" d="M10.5 12.75l-1.75-1.75-1.5 1.5 3.25 3.25 5.5-5.5-1.5-1.5z"/>
            </svg>
          </span>
          Security Alerts
        </div>
      </div>

      <!-- FILTERS BAR -->
      <div class="card">
        <form class="toolbar" method="get" action="security_alerts.php">
          <div>
            <label for="cause" class="small">Cause</label><br>
            <select id="cause" name="cause">
              <?php foreach ($allowedCauses as $c): ?>
                <option value="<?= sa_esc($c) ?>" <?= $cause===$c?'selected':'' ?>><?= sa_esc(sa_cause_label($c)) ?></option>
              <?php endforeach; ?>
            </select>
          </div>

          <div style="display:flex; align-items:center; gap:10px; padding-top:10px">
            <input class="checkbox" type="checkbox" id="only_unread" name="only_unread" value="1" <?= $onlyUnread?'checked':'' ?>>
            <label for="only_unread" style="margin:0">Show unread only</label>
          </div>

          <button class="btn apply" type="submit">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M9 16.2l-3.5-3.5-1.4 1.4L9 19 20.3 7.7l-1.4-1.4z"/></svg>
            Apply
          </button>

          <!-- Reset WITHOUT icon -->
          <a class="btn reset" href="security_alerts.php">Reset</a>

          <div class="top-right" style="margin-left:auto">
            <label style="display:flex; align-items:center; gap:10px; font-weight:700;">
              <input type="checkbox" id="autorefresh" <?= $autoRefresh ? 'checked' : '' ?>
                onclick="location.href='<?= sa_esc(sa_url_with(['autorefresh'=>$autoRefresh?null:1])) ?>'">
              Auto-refresh
            </label>
            <span class="muted">Showing last 7 days • Asia/Manila (UTC+8)</span>
          </div>
        </form>

        <!-- QUICK FILTER CHIPS -->
        <div class="quick-chips">
          <?php foreach ($allowedCauses as $c): ?>
            <?php $active = ($cause === $c) ? 'active' : ''; ?>
            <a class="chip <?= $active ?>" href="<?= sa_esc(sa_url_with(['cause'=>$c, 'page'=>1])) ?>">
              <?= sa_esc(sa_cause_label($c)) ?>
              <span class="muted" style="font-weight:800;"><?= (int)($causeCounts[$c] ?? 0) ?></span>
            </a>
          <?php endforeach; ?>
        </div>
      </div>

      <!-- LIST & ACTIONS -->
      <div class="card" style="margin-top:14px;">
        <div class="headerline">
          <div class="muted">
            <?php
              $start = $total ? ($offset + 1) : 0;
              $end   = min($offset + $perPage, $total);
              echo "Showing {$start}–{$end} of {$total}";
            ?>
          </div>

          <div class="top-right" style="margin-left:auto">
            <button id="markAllBtn" class="btn" style="background:#ffe6e6;color:#b02a2a" type="button">Mark all as read</button>
            <form id="markAllForm" method="post" style="display:none">
              <input type="hidden" name="action" value="mark_all_read">
            </form>
          </div>
        </div>

        <div class="table-wrap">
          <form id="bulkForm" method="post">
            <input type="hidden" name="action" id="bulkAction" value="">
            <table class="table">
              <thead>
                <tr>
                  <th style="width:48px;">
                    <input type="checkbox" id="checkAll" title="Select all on page">
                  </th>
                  <th>Time</th>
                  <th>Cause</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
              <?php if (!$rows): ?>
                <tr><td colspan="4" style="padding:56px 12px; text-align:center; color:#6f7da6">No alerts for the current filters in the last 7 days.</td></tr>
              <?php else: ?>
                <?php foreach ($rows as $r): ?>
                  <?php
                    $isUnread = ((int)$r['is_read']) === 0;
                    $c = $r['cause'] ?? 'other';
                    $dot = $badgeColors[$c] ?? '#64748B';
                  ?>
                  <tr class="<?= $isUnread ? 'row-unread' : '' ?>">
                    <td data-label="">
                      <input type="checkbox" class="rowcheck" name="ids[]" value="<?= (int)$r['id'] ?>">
                    </td>
                    <td class="col-time" data-label="Time">
                      <strong><?= sa_time_ago($r['created_at']); ?></strong>
                      <small><?= date('M d, Y H:i', strtotime($r['created_at'])) ?></small>
                    </td>
                    <td data-label="Cause">
                      <span class="badge">
                        <span class="dot" style="background:<?= sa_esc($dot) ?>;"></span>
                        <?= sa_esc(sa_cause_label($c)) ?>
                        <?php if ($isUnread): ?>
                          <span class="muted" style="font-weight:800; margin-left:4px;">• Unread</span>
                        <?php endif; ?>
                      </span>
                    </td>
                    <td data-label="Actions">
                      <div class="pill-group">
                        <?php if ($isUnread): ?>
                          <form method="post" style="display:inline">
                            <input type="hidden" name="action" value="mark_read">
                            <input type="hidden" name="id" value="<?= (int)$r['id'] ?>">
                            <button type="submit" class="pill blue">
                              <svg viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2l-3.5-3.5-1.4 1.4L9 19 20.3 7.7l-1.4-1.4z"/></svg>
                              Mark read
                            </button>
                          </form>
                        <?php else: ?>
                          <form method="post" style="display:inline">
                            <input type="hidden" name="action" value="mark_unread">
                            <input type="hidden" name="id" value="<?= (int)$r['id'] ?>">
                            <button type="submit" class="pill amber">
                              <svg viewBox="0 0 24 24" fill="currentColor"><path d="M12 6V3L8 7l4 4V8c2.76 0 5 2.24 5 5a5 5 0 01-9.9 1H5.02A7.002 7.002 0 0012 22a7 7 0 000-14z"/></svg>
                              Mark unread
                            </button>
                          </form>
                        <?php endif; ?>

                        <form class="deleteRowForm" method="post" style="display:inline">
                          <input type="hidden" name="action" value="delete">
                          <input type="hidden" name="id" value="<?= (int)$r['id'] ?>">
                          <button type="button" class="pill red deleteRowBtn">
                            <svg viewBox="0 0 24 24" fill="currentColor"><path d="M9 3h6l1 2h4v2H4V5h4l1-2zm1 6h2v9h-2V9zm4 0h2v9h-2V9zM7 9h2v9H7V9z"/></svg>
                            Delete
                          </button>
                        </form>
                      </div>
                    </td>
                  </tr>
                <?php endforeach; ?>
              <?php endif; ?>
              </tbody>
            </table>

            <!-- BULK BAR -->
            <div id="bulkBar" class="bulkbar">
              <div><span class="count" id="bulkCount">0</span> selected</div>
              <div style="display:flex; gap:10px; align-items:center; flex-wrap:wrap;">
                <button type="button" class="pill blue" id="bulkReadBtn">
                  <svg viewBox="0 0 24 24" fill="currentColor"><path d="M9 16.2l-3.5-3.5-1.4 1.4L9 19 20.3 7.7l-1.4-1.4z"/></svg>
                  Mark selected read
                </button>
                <button type="button" class="pill amber" id="bulkUnreadBtn">
                  <svg viewBox="0 0 24 24" fill="currentColor"><path d="M12 6V3L8 7l4 4V8c2.76 0 5 2.24 5 5a5 5 0 01-9.9 1H5.02A7.002 7.002 0 0012 22a7 7 0 000-14z"/></svg>
                  Mark selected unread
                </button>
                <button type="button" class="pill red" id="bulkDeleteBtn">
                  <svg viewBox="0 0 24 24" fill="currentColor"><path d="M9 3h6l1 2h4v2H4V5h4l1-2zm1 6h2v9h-2V9zm4 0h2v9h-2V9zM7 9h2v9H7V9z"/></svg>
                  Delete selected
                </button>
              </div>
            </div>
          </form>
        </div>

        <!-- PAGINATION -->
        <div class="pagination">
          <div class="muted">
            <?php
              $start = $total ? ($offset + 1) : 0;
              $end   = min($offset + $perPage, $total);
              echo "Showing {$start}–{$end} of {$total}";
            ?>
          </div>
          <div class="pager">
            <?php
              $window = 2;
              $from = max(1, $page - $window);
              $to   = min($totalPages, $page + $window);

              if ($page > 1) {
                echo '<a href="'.sa_esc(sa_url_with(['page'=>1])).'">First</a>';
                echo '<a href="'.sa_esc(sa_url_with(['page'=>$page-1])).'">Prev</a>';
              }

              if ($from > 1) {
                echo '<a href="'.sa_esc(sa_url_with(['page'=>1])).'">1</a><span class="sep">…</span>';
              }

              for ($p=$from; $p<=$to; $p++) {
                $cls = $p===$page ? 'class="active"' : '';
                echo '<a '.$cls.' href="'.sa_esc(sa_url_with(['page'=>$p])).'">'.(int)$p.'</a>';
              }

              if ($to < $totalPages) {
                echo '<span class="sep">…</span><a href="'.sa_esc(sa_url_with(['page'=>$totalPages])).'">'.(int)$totalPages.'</a>';
              }

              if ($page < $totalPages) {
                echo '<a href="'.sa_esc(sa_url_with(['page'=>$page+1])).'">Next</a>';
                echo '<a href="'.sa_esc(sa_url_with(['page'=>$totalPages])).'">Last</a>';
              }
            ?>
          </div>
        </div>
      </div>

    </div><!-- /.wrap -->
  </section>
</main>

<!-- SweetAlert-like reusable modal -->
<div class="sweet-overlay" id="sweetOverlay" role="dialog" aria-modal="true" aria-hidden="true">
  <div class="sweet" id="sweetBox">
    <div class="icon" id="sweetIcon"></div>
    <div class="title" id="sweetTitle"></div>
    <div class="text" id="sweetText"></div>
    <div class="actions" id="sweetActions">
      <button class="btn cancel" id="sweetCancel">Cancel</button>
      <button class="btn primary" id="sweetOk">OK</button>
    </div>
  </div>
</div>

<script>
/* ======================= Interactions ======================= */
(function(){
  const $  = (s,root=document)=>root.querySelector(s);
  const $$ = (s,root=document)=>Array.from(root.querySelectorAll(s));

  /* SweetAlert-like helpers */
  const overlay = $('#sweetOverlay');
  const box     = $('#sweetBox');
  const icon    = $('#sweetIcon');
  const title   = $('#sweetTitle');
  const text    = $('#sweetText');
  const btnOK   = $('#sweetOk');
  const btnCancel = $('#sweetCancel');

  function openSweet({type='success', title:t='Done', text:tx='', confirmText='OK', showCancel=false}={}, cb){
    overlay.style.display = 'flex';
    box.classList.remove('success','error');
    box.classList.add(type);
    icon.innerHTML = type==='success'
      ? '<svg width="26" height="26" viewBox="0 0 24 24" fill="#16a34a"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg>'
      : '<svg width="26" height="26" viewBox="0 0 24 24" fill="#dc2626"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"/></svg>';
    title.textContent = t;
    text.textContent  = tx;
    btnOK.textContent = confirmText || 'OK';
    btnCancel.style.display = showCancel ? 'inline-flex' : 'none';

    function cleanup(){ overlay.style.display='none'; btnOK.onclick=null; btnCancel.onclick=null; overlay.onclick=null; }
    btnOK.onclick = ()=>{ cleanup(); cb && cb(true); };
    btnCancel.onclick = ()=>{ cleanup(); cb && cb(false); };
    overlay.onclick = (e)=>{ if(e.target===overlay){ cleanup(); cb && cb(false); } };
  }

  function sweetConfirm({title, text, confirmText='Yes', type='error'}, cb){
    openSweet({type, title, text, confirmText, showCancel:true}, (ok)=> cb && cb(ok));
  }
  function sweetAlert({title, text, type='success', confirmText='OK'}){
    openSweet({type, title, text, confirmText, showCancel:false});
  }

  /* Bulk selection */
  const checkAll   = $('#checkAll');
  const rowChecks  = $$('.rowcheck');
  const bulkBar    = $('#bulkBar');
  const bulkCount  = $('#bulkCount');
  const bulkAction = $('#bulkAction');
  const bulkForm   = $('#bulkForm');

  function refreshBulk(){
    const n = rowChecks.filter(c => c.checked).length;
    bulkCount.textContent = n;
    bulkBar.classList.toggle('active', n>0);
    if (checkAll) {
      checkAll.checked = (n === rowChecks.length && n>0);
      checkAll.indeterminate = (n>0 && n<rowChecks.length);
    }
  }
  if (checkAll) {
    checkAll.addEventListener('change', () => {
      rowChecks.forEach(c => c.checked = checkAll.checked);
      refreshBulk();
    });
  }
  rowChecks.forEach(c => c.addEventListener('change', refreshBulk));

  /* Bulk buttons */
  $('#bulkReadBtn').addEventListener('click', () => {
    if (!rowChecks.some(c=>c.checked)) return;
    bulkAction.value = 'mark_read';
    bulkForm.submit();
  });
  $('#bulkUnreadBtn').addEventListener('click', () => {
    if (!rowChecks.some(c=>c.checked)) return;
    bulkAction.value = 'mark_unread';
    bulkForm.submit();
  });
  $('#bulkDeleteBtn').addEventListener('click', () => {
    if (!rowChecks.some(c=>c.checked)) return;
    sweetConfirm({
      title: 'Delete selected alerts?',
      text: 'This action cannot be undone.',
      confirmText: 'Delete',
      type: 'error'
    }, (ok)=>{
      if (ok){
        bulkAction.value = 'delete';
        bulkForm.submit();
      }
    });
  });

  /* Per-row delete confirmation */
  $$('.deleteRowBtn').forEach(btn=>{
    btn.addEventListener('click', (e)=>{
      const form = e.currentTarget.closest('form');
      sweetConfirm({
        title: 'Delete this alert?',
        text: 'This action cannot be undone.',
        confirmText: 'Delete',
        type: 'error'
      }, (ok)=>{ if(ok) form.submit(); });
    });
  });

  /* Mark all as read confirmation */
  $('#markAllBtn').addEventListener('click', ()=>{
    sweetConfirm({
      title: 'Mark all recent alerts as read?',
      text: 'Applies to the last 7 days.',
      confirmText: 'Mark all read',
      type: 'success'
    }, (ok)=>{ if(ok) $('#markAllForm').submit(); });
  });

  /* Flash popup from server */
  <?php if ($flash): ?>
    sweetAlert({
      title: <?= json_encode($flash[1]==='error' ? 'Completed' : 'Completed') ?>,
      text:  <?= json_encode($flash[0]) ?>,
      type:  <?= json_encode($flash[1]) ?>
    });
  <?php endif; ?>

  /* Optional client-side 30s auto-refresh */
  const urlParams = new URLSearchParams(location.search);
  if (urlParams.get('autorefresh') === '1') {
    setInterval(() => location.reload(), 30000);
  }
})();
</script>








function checkAndSendReminders($conn){
    date_default_timezone_set('Asia/Manila');
    $now = time();

    $sql = "
    SELECT l.locker_number, l.code, l.user_id, l.expires_at, l.duration_minutes,
            l.notify30_sent, l.notify15_sent, l.notify10_sent, l.notify2_sent,
            u.first_name, u.last_name, u.email
    FROM locker_qr l
    LEFT JOIN users u ON u.id = l.user_id
    WHERE l.status='occupied' AND l.expires_at IS NOT NULL AND l.expires_at > NOW()
    ";  
    $res = $conn->query($sql);
    while($row = $res->fetch_assoc()){
        $locker        = (int)$row['locker_number'];
        $expires_ts    = strtotime($row['expires_at']);
        if ($expires_ts === false) continue;

        $remaining_sec = $expires_ts - $now;
        if ($remaining_sec <= 0) continue;

        $remaining_min = floor($remaining_sec / 60);
        $total_min     = (int)$row['duration_minutes'];
        $sent30 = (int)$row['notify30_sent'];
        $sent15 = (int)$row['notify15_sent'];
        $sent10 = (int)$row['notify10_sent'];
        $sent2  = (int)$row['notify2_sent']; 
        $name          = trim(($row['first_name'] ?? '').' '.($row['last_name'] ?? ''));
        $email         = $row['email'] ?? '';
        $expires_fmt   = date('F j, Y h:i A', $expires_ts);

        $didUpdate = false;

        if ($total_min >= 60) {
            if ($remaining_min <= 30 && $remaining_min > 15 && !$sent30) {
                email_time_left($email, $name, $locker, 30, $expires_fmt);
                $sent30 = 1; $didUpdate = true;
            }
            if ($remaining_min <= 15 && $remaining_min > 0 && !$sent15) {
                if (!$sent30) { email_time_left($email, $name, $locker, 30, $expires_fmt); $sent30 = 1; }
                email_time_left($email, $name, $locker, 15, $expires_fmt);
                $sent15 = 1; $didUpdate = true;
            }
        } elseif ($total_min >= 30) {
            if ($remaining_min <= 15 && $remaining_min > 0 && !$sent15) {
                email_time_left($email, $name, $locker, 15, $expires_fmt);
                $sent15 = 1; $didUpdate = true;
            }
        } elseif ($total_min >= 20) {
            if ($remaining_min <= 10 && $remaining_min > 0 && !$sent10) {
                email_time_left($email, $name, $locker, 10, $expires_fmt);
                $sent10 = 1; $didUpdate = true;
            }
        } elseif ($total_min >= 5) {
            if ($remaining_min <= 2 && $remaining_min > 0 && !$sent2) {
                email_time_left($email, $name, $locker, 2, $expires_fmt);
                $sent2 = 1; $didUpdate = true;
            }
        }

       if ($didUpdate) {
            $stmt = $conn->prepare("
                UPDATE locker_qr
                SET notify30_sent=?, notify15_sent=?, notify10_sent=?, notify2_sent=?
                WHERE locker_number=?
            ");
            $stmt->bind_param("iiiii", $sent30, $sent15, $sent10, $sent2, $locker);
            $stmt->execute();
        }
    }
}